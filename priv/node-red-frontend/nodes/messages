{
    "@gorenje/node-red-contrib-flowcompare/flowcompare": {},
    "@gregoriusrippenstein/erlang-red-supervisor-node/erlsupervisor": {
        "erlsupervisor": {
            "auto_shutdown": {
                "all_significant": "All Significant",
                "any_significant": "Any Significant",
                "never": "Never"
            },
            "child_restart": {
                "permanent": "Permanent",
                "temporary": "Temporary",
                "transient": "Transient"
            },
            "child_shutdown": {
                "brutal_kill": "Brutal Kill",
                "infinite": "Infinite Timeout",
                "timeout": "Timeout"
            },
            "child_type": {
                "supervisor": "Supervisor",
                "worker": "Worker"
            },
            "label": {
                "auto_shutdown": "Auto Shutdown",
                "child_restart": "Restart",
                "child_shutdown": "Shutdown",
                "child_type": "Type",
                "intensity": "Intensity (count)",
                "period": "Period (seconds)",
                "restart_strategy": "Restart Strategy",
                "selectAll": "select all",
                "source": "Supervised Nodes",
                "supervisor_type": "Type of Supervisor",
                "tab": {
                    "child_config": "Children",
                    "supervisor_config": "Options"
                }
            },
            "nodeCount": "supervisor: __number__",
            "placeholder": {
                "intensity": "Count",
                "period": "Seconds",
                "timeout": "Timeout (secs)"
            },
            "restart_strategy": {
                "one_for_all": "One for All",
                "one_for_one": "One for one",
                "rest_for_one": "Rest for one",
                "simple_one_for_one": "Simple One for one"
            },
            "scope": {
                "all": "All flow nodes",
                "group": "In same group",
                "selected": "Selected nodes"
            },
            "superviseFlow": "supervisor: flow",
            "superviseGroup": "supervisor: group",
            "supervisor_type": {
                "dynamic": "Dynamic child specification",
                "static": "Static child specification"
            }
        }
    },
    "@gregoriusrippenstein/erlang-red-unittest/ut-assert-debug": {
        "ut-assert-debug": {
            "label": {
                "inverse": "Inverse, no debug message.",
                "nodeid": "Node Id",
                "statusset": "Status Set"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/erlang-red-unittest/ut-assert-failure": {
        "ut-assert-failure": {
            "label": {
                "failed": "assert failed",
                "statusset": "Status Set"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/erlang-red-unittest/ut-assert-status": {
        "ut-assert-status": {
            "label": {
                "content": "Content",
                "inverse": "Inverse, no status message",
                "nodeid": "Node Id",
                "statusset": "Status Set"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/erlang-red-unittest/ut-assert-success": {
        "ut-assert-success": {
            "label": {
                "statusset": "Status Set",
                "succeed": "assert succeed"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/erlang-red-unittest/ut-assert-values": {
        "ut-assert-values": {
            "action": {
                "change": "Change",
                "debug": "Debug",
                "delete": "Delete",
                "eql": "Equal",
                "move": "Move",
                "mth": "Match",
                "noteql": "Not Equal",
                "notmth": "Not Match",
                "notset": "Not Defined",
                "replace": "Replace with",
                "search": "Search for",
                "set": "Defined",
                "to": "to",
                "toValue": "to the value"
            },
            "errors": {
                "invalid-expr": "Invalid JSONata expression: __error__",
                "invalid-from": "Invalid 'from' property: __error__",
                "invalid-json": "Invalid 'to' JSON property",
                "invalid-json-data": "Invalid JSON data: __error__",
                "invalid-prop": "Invalid property expression: __property__",
                "no-override": "Cannot set property of non-object type: __property__"
            },
            "label": {
                "change": "change __property__",
                "changeCount": "assert: __count__ values",
                "debug": "debug __property__",
                "deepCopy": "Deep copy value",
                "delete": "delete __property__",
                "eql": "equal __property__",
                "move": "move __property__",
                "mth": "match __property__",
                "noteql": "not equal __property__",
                "notmth": "not match __property__",
                "notset": "not set __property__",
                "regex": "Use regular expressions",
                "rule": "rule",
                "rules": "Rules",
                "set": "set __property__",
                "statusset": "Status Set",
                "unsupported": "supported rule __property__"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contrib-flowhub/flowhubcfg": {},
    "@gregoriusrippenstein/node-red-contrib-flowhub/flowhubpull": {},
    "node-red-node-markdown/markdown": {}
}
