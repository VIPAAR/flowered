[{"id":"b8e2ad1371ddb546","type":"tab","label":"[.core] installing the ace erlang tokenizer for Monaco","disabled":false,"info":"This is taken from https://github.com/brijeshb42/monaco-ace-tokenizer/tree/master which was linked to from https://github.com/Microsoft/monaco-editor/issues/882 - strangely Elixir made it into the monaco editor, Erlang didn't.\n\nInstead other languages of note such as ECL, or COBOL are supported!\n\nThis was just test flow to check whether the code to install the tokenizer worked in my browser.\n","env":[{"name":"ERED_PENDING","value":"false","type":"bool"}]},{"id":"00731e83a59194ec","type":"template","z":"b8e2ad1371ddb546","name":"Erlang syntax highlighting","field":"payload","fieldType":"msg","format":"erlang","syntax":"mustache","template":"-module(ered_webserver).\n\n-behaviour(gen_server).\n\n-export([init/1, handle_call/3, handle_cast/2]).\n-export([handle_info/2, terminate/2, code_change/3]).\n-export([stop/0]).\n-export([start/0]).\n\n-export([\n    register_http_in/3,\n    unregister_http_in/3\n]).\n\n-define(MADASD, io:format(\"asdasd\",[])).\n\nstart() ->\n    ?MADASD,\n    InitialState =\n        case os:getenv(\"DISABLE_FLOWEDITOR\") of\n            false ->\n                #{floweditor_routes => base_routes()};\n            _ ->\n                io:format(\"Disabling FlowEditor Frontend~n\", []),\n                #{floweditor_routes => []}\n        end,\n    State = maps:put(http_in_routes, [], InitialState),\n    herd_up_the_cattle(State),\n    gen_server:start_link({local, ?MODULE}, ?MODULE, State, []).\n\ninit(State) ->\n    {ok, State}.\n\n%%\n%%\nregister_http_in(Path, Method, {Pid, WsName}) ->\n    gen_server:call(?MODULE, {add_route, Path, Method, {Pid, WsName}}).\n\nunregister_http_in(Path, Method, WsName) ->\n    gen_server:call(?MODULE, {del_route, Path, Method, WsName}).\n\n%%\n%%\nhandle_call({del_route, Path, Method, WsName}, _From, State) ->\n    NwR =\n        case lists:keyfind(Path, 1, maps:get(http_in_routes, State)) of\n            false ->\n                maps:get(http_in_routes, State);\n            {Path, Handler, Ary} ->\n                Ary2 = lists:filter(\n                    fun({M, _P, W}) -> M =/= Method andalso W =/= WsName end,\n                    Ary\n                ),\n                lists:keyreplace(\n                    Path,\n                    1,\n                    maps:get(http_in_routes, State),\n                    {Path, Handler, Ary2}\n                )\n        end,\n    {reply, ok, maps:put(http_in_routes, NwR, State)};\nhandle_call({add_route, Path, Method, {Pid, WsName}}, _From, State) ->\n    ExtraRoutes =\n        case lists:keyfind(Path, 1, maps:get(http_in_routes, State)) of\n            false ->\n                [\n                    {Path, ered_http_node_http_in_handler, [\n                        {Method, Pid, WsName}\n                    ]}\n                    | maps:get(http_in_routes, State)\n                ];\n            {Path, Handler, Ary} ->\n                %% TODO here check for duplication and ensure that its replaced\n                %% TODO with the current handler. I.e. Tuple {Path, Method,\n                %% TODO WsName} should be unique and  map to exactly one pid.\n                [\n                    {Path, Handler, [{Method, Pid, WsName} | Ary]}\n                    | lists:keydelete(Path, 1, maps:get(http_in_routes, State))\n                ]\n        end,\n\n    Dispatch = cowboy_router:compile(\n        [{'_', ExtraRoutes ++ maps:get(floweditor_routes, State)}]\n    ),\n\n    cowboy:set_env(erlang_red_listener, dispatch, Dispatch),\n    {reply, ok, maps:put(http_in_routes, ExtraRoutes, State)};\nhandle_call(_Msg, _From, State) ->\n    {reply, State, State}.\n\n%%\n%%\nhandle_cast(stop, State) ->\n    {stop, normal, State};\nhandle_cast(_Msg, Store) ->\n    {noreply, Store}.\n\n%%\n%%\nhandle_info(_Msg, ErrorStore) ->\n    {noreply, ErrorStore}.\n\ncode_change(_OldVersion, ErrorStore, _Extra) ->\n    {ok, ErrorStore}.\n\nstop() ->\n    gen_server:cast(?MODULE, stop).\n\nterminate(normal, _State) ->\n    ok.\n\n%%\n%%\n\nherd_up_the_cattle(State) ->\n    %% heroku likes to provide port numbers to docker images running\n    %% on its platform - so support that\n    Port =\n        case os:getenv(\"PORT\") of\n            false ->\n                8080;\n            PortNum ->\n                list_to_integer(PortNum)\n        end,\n\n    Dispatch =\n        cowboy_router:compile([\n            {'_',\n                maps:get(floweditor_routes, State) ++\n                    maps:get(http_in_routes, State)}\n        ]),\n\n    %% setup cowboy.\n    {ok, _} = cowboy:start_clear(\n        erlang_red_listener,\n        [{port, Port}],\n        #{\n            env => #{dispatch => Dispatch},\n            middlewares => [ered_http_auth, cowboy_router, cowboy_handler]\n        }\n    ).\n\n%%\n%% Naming convention is that anything with 'nodered' in the name is part\n%% of the orignal NodeRED API that link the flow editor with the server.\n%% Other calls are extensions to support ErlangRED functionality.\n%%\n\nbase_routes() ->\n    [\n        %%\n        %% Sock'em in the eye websockets\n        %%\n        {\"/node-red/comms\", ered_http_nodered_websocket, #{\n            stats_interval => 30000\n        }},\n\n        %%\n        %% POST handlers\n        %%\n\n        %% API for storing test cases to disk.\n        {\"/testcase/:workspaceid/create\", ered_http_testcase_post_handler, []},\n\n        %%\n        %% APIs for the unit testing nodes\n        {\"/UnitTesting/tests.json\", ered_http_unittesting_tests_get_handler,\n            []},\n        {\"/UnitTesting/:flowid/runtest\",\n            ered_http_unittesting_runtests_get_handler, []},\n        {\"/UnitTesting/:flowid/retrieve\",\n            ered_http_unittesting_retrieve_flow_handler, []},\n        {\"/flows.test.json\", ered_http_unittesting_retrieve_flow_handler, []},\n        {\"/UnitTesting/halt\", ered_http_unittesting_halt_handler, []},\n\n        %%\n        %% these APIS are required by Node-RED\n        {\"/settings/user\", ered_http_nodered_empty_json, []},\n        {\"/nodes\", ered_http_nodered_empty_json, []},\n        {\"/flows\", ered_http_nodered_flow_deploy_handler, []},\n        {\"/inject/:nodeid\", ered_http_nodered_inject_node_button_handler, []},\n\n        {\"/debug/view/debug-utils.js\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_file, erlang_red,\n                \"node-red-frontend/debug/view/debug-utils.js\"}},\n\n        {\"/debug/:nodeid/:action\", [{method, <<\"POST\">>}],\n            ered_http_nodered_debug_node_active, []},\n\n        %%\n        %% GET handlers for delivery of the static content\n        %%\n\n        %%\n        %% Flow Compare node allows comparing the flow data in the browser\n        %% with what is stored on the server. Good for knowing the in-browser\n        %% changes made to installed test cases.\n        {\"/FlowCompare/jslib/diff.min.js\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_file, erlang_red, \"vendor/diff.min.js\"}},\n\n        {\"/FlowHubLib/jslib/diff.min.js\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_file, erlang_red, \"vendor/flowhub.diff.min.js\"}},\n\n        {\"/FlowCompare/jslib/flowviewer.min.js\", [{method, <<\"GET\">>}],\n            cowboy_static, {priv_file, erlang_red, \"vendor/flowviewer.min.js\"}},\n\n        %% TODO the constraints here DONT WORK - Cowboy just\n        %% TODO ignores them because Bindings is empty.\n        %%\n        {\"/library/local/flows/\", [{method, <<\"GET\">>}],\n            ered_http_nodered_empty_json, []},\n        {\"/credentials/[...]\", [{method, <<\"GET\">>}],\n            ered_http_nodered_empty_json, []},\n        {\"/context/[...]\", [{method, <<\"GET\">>}], ered_http_nodered_empty_json,\n            []},\n\n        {\"/node-red\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_file, erlang_red, \"node-red-frontend/index.html\"}},\n\n        %%% Wrapper site nonsense starts\n        {\"/\", [{method, <<\"GET\">>}], ered_http_release_status, []},\n\n        {\"/media/[...]\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_dir, erlang_red, \"wrapper_site/media\", []}},\n\n        {\"/styles/[...]\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_dir, erlang_red, \"wrapper_site/styles\", []}},\n        %%% Wrapper site nonsense ends\n\n        {\"/[...]\", [{method, <<\"GET\">>}], cowboy_static,\n            {priv_dir, erlang_red, \"node-red-frontend\", [\n                {mimetypes, ered_http_nodered_mimetypes, mt}\n            ]}}\n    ].\n","output":"str","x":796,"y":423,"wires":[[]]},{"id":"1ffeee23f8f25e83","type":"template","z":"b8e2ad1371ddb546","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" >\n</head>\n<body>\n  <!-- code snippet taken from https://github.com/brijeshb42/monaco-ace-tokenizer -->\n  <div id=\"container\" style=\"width:800px;height:600px;border:1px solid grey\"></div>\n\n  <script src=\"https://unpkg.com/monaco-editor/min/vs/loader.js\"></script>\n  <script>\n    require.config({\n      paths: {\n        'vs': 'https://unpkg.com/monaco-editor/min/vs',\n        'tokenizer': 'https://unpkg.com/monaco-ace-tokenizer/dist',\n      }\n    });\n    require(['vs/editor/editor.main', 'tokenizer/monaco-tokenizer', 'tokenizer/definitions/erlang'], function(a, MonacoAceTokenizer, ErlangDefinition) {\n      monaco.languages.register({\n        id: 'erlang'\n      });\n      MonacoAceTokenizer.registerRulesForLanguage('erlang', new ErlangDefinition.default);\n      var editor = monaco.editor.create(document.getElementById('container'), {\n        value: '',\n        language: 'erlang'\n      });\n    });\n  </script>\n</body>\n</html>","output":"str","x":370,"y":532,"wires":[["d818e995ea67b42a"]]},{"id":"2f7cf4bc5eed6ad1","type":"http in","z":"b8e2ad1371ddb546","name":"","url":"/tokenizer/test","method":"get","upload":false,"swaggerDoc":"","x":261,"y":425,"wires":[["1ffeee23f8f25e83"]]},{"id":"d818e995ea67b42a","type":"http response","z":"b8e2ad1371ddb546","name":"","statusCode":"200","headers":{},"x":568,"y":630,"wires":[]}]